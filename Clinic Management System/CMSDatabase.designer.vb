'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CMSDatabase")>  _
Partial Public Class CMSDatabaseDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  Partial Private Sub InsertMedicalRecord(instance As MedicalRecord)
    End Sub
  Partial Private Sub UpdateMedicalRecord(instance As MedicalRecord)
    End Sub
  Partial Private Sub DeleteMedicalRecord(instance As MedicalRecord)
    End Sub
  Partial Private Sub InsertPayment(instance As Payment)
    End Sub
  Partial Private Sub UpdatePayment(instance As Payment)
    End Sub
  Partial Private Sub DeletePayment(instance As Payment)
    End Sub
  Partial Private Sub InsertPanelOrganisation(instance As PanelOrganisation)
    End Sub
  Partial Private Sub UpdatePanelOrganisation(instance As PanelOrganisation)
    End Sub
  Partial Private Sub DeletePanelOrganisation(instance As PanelOrganisation)
    End Sub
  Partial Private Sub InsertInventory(instance As Inventory)
    End Sub
  Partial Private Sub UpdateInventory(instance As Inventory)
    End Sub
  Partial Private Sub DeleteInventory(instance As Inventory)
    End Sub
  Partial Private Sub InsertPatient(instance As Patient)
    End Sub
  Partial Private Sub UpdatePatient(instance As Patient)
    End Sub
  Partial Private Sub DeletePatient(instance As Patient)
    End Sub
  Partial Private Sub InsertInvoice(instance As Invoice)
    End Sub
  Partial Private Sub UpdateInvoice(instance As Invoice)
    End Sub
  Partial Private Sub DeleteInvoice(instance As Invoice)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertAppointment(instance As Appointment)
    End Sub
  Partial Private Sub UpdateAppointment(instance As Appointment)
    End Sub
  Partial Private Sub DeleteAppointment(instance As Appointment)
    End Sub
  Partial Private Sub InsertMedical(instance As Medical)
    End Sub
  Partial Private Sub UpdateMedical(instance As Medical)
    End Sub
  Partial Private Sub DeleteMedical(instance As Medical)
    End Sub
  Partial Private Sub InsertUpdateCheck(instance As UpdateCheck)
    End Sub
  Partial Private Sub UpdateUpdateCheck(instance As UpdateCheck)
    End Sub
  Partial Private Sub DeleteUpdateCheck(instance As UpdateCheck)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Clinic_Management_System.My.MySettings.Default.CMSDatabaseConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
	
	Public ReadOnly Property MedicalRecords() As System.Data.Linq.Table(Of MedicalRecord)
		Get
			Return Me.GetTable(Of MedicalRecord)
		End Get
	End Property
	
	Public ReadOnly Property Payments() As System.Data.Linq.Table(Of Payment)
		Get
			Return Me.GetTable(Of Payment)
		End Get
	End Property
	
	Public ReadOnly Property PanelOrganisations() As System.Data.Linq.Table(Of PanelOrganisation)
		Get
			Return Me.GetTable(Of PanelOrganisation)
		End Get
	End Property
	
	Public ReadOnly Property Inventories() As System.Data.Linq.Table(Of Inventory)
		Get
			Return Me.GetTable(Of Inventory)
		End Get
	End Property
	
	Public ReadOnly Property Patients() As System.Data.Linq.Table(Of Patient)
		Get
			Return Me.GetTable(Of Patient)
		End Get
	End Property
	
	Public ReadOnly Property Invoices() As System.Data.Linq.Table(Of Invoice)
		Get
			Return Me.GetTable(Of Invoice)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property Appointments() As System.Data.Linq.Table(Of Appointment)
		Get
			Return Me.GetTable(Of Appointment)
		End Get
	End Property
	
	Public ReadOnly Property Medicals() As System.Data.Linq.Table(Of Medical)
		Get
			Return Me.GetTable(Of Medical)
		End Get
	End Property
	
	Public ReadOnly Property UpdateChecks() As System.Data.Linq.Table(Of UpdateCheck)
		Get
			Return Me.GetTable(Of UpdateCheck)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employee")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmployeeId As String
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _EmployeeType As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _IcNo As String
	
	Private _Age As String
	
	Private _Gender As System.Nullable(Of Char)
	
	Private _ContactNo As String
	
	Private _EmailAdd As String
	
	Private _Address As String
	
	Private _State As String
	
	Private _PostCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmployeeTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeTypeChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnIcNoChanging(value As String)
    End Sub
    Partial Private Sub OnIcNoChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As String)
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnContactNoChanging(value As String)
    End Sub
    Partial Private Sub OnContactNoChanged()
    End Sub
    Partial Private Sub OnEmailAddChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property EmployeeId() As String
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (String.Equals(Me._EmployeeId, value) = false) Then
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(25)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(30)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeType", DbType:="VarChar(15)")>  _
	Public Property EmployeeType() As String
		Get
			Return Me._EmployeeType
		End Get
		Set
			If (String.Equals(Me._EmployeeType, value) = false) Then
				Me.OnEmployeeTypeChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeType = value
				Me.SendPropertyChanged("EmployeeType")
				Me.OnEmployeeTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(20)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(20)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IcNo", DbType:="VarChar(14)")>  _
	Public Property IcNo() As String
		Get
			Return Me._IcNo
		End Get
		Set
			If (String.Equals(Me._IcNo, value) = false) Then
				Me.OnIcNoChanging(value)
				Me.SendPropertyChanging
				Me._IcNo = value
				Me.SendPropertyChanged("IcNo")
				Me.OnIcNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="VarChar(3)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="Char(1)")>  _
	Public Property Gender() As System.Nullable(Of Char)
		Get
			Return Me._Gender
		End Get
		Set
			If (Me._Gender.Equals(value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNo", DbType:="VarChar(12)")>  _
	Public Property ContactNo() As String
		Get
			Return Me._ContactNo
		End Get
		Set
			If (String.Equals(Me._ContactNo, value) = false) Then
				Me.OnContactNoChanging(value)
				Me.SendPropertyChanging
				Me._ContactNo = value
				Me.SendPropertyChanged("ContactNo")
				Me.OnContactNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAdd", DbType:="VarChar(50)")>  _
	Public Property EmailAdd() As String
		Get
			Return Me._EmailAdd
		End Get
		Set
			If (String.Equals(Me._EmailAdd, value) = false) Then
				Me.OnEmailAddChanging(value)
				Me.SendPropertyChanging
				Me._EmailAdd = value
				Me.SendPropertyChanged("EmailAdd")
				Me.OnEmailAddChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(60)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(20)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="VarChar(6)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MedicalRecord")>  _
Partial Public Class MedicalRecord
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RecordId As String
	
	Private _PatientId As String
	
	Private _MedicalId As String
	
	Private _VisitDate As System.Nullable(Of Date)
	
	Private _BloodPressure As String
	
	Private _Allergies As String
	
	Private _Disease As String
	
	Private _Caution As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRecordIdChanging(value As String)
    End Sub
    Partial Private Sub OnRecordIdChanged()
    End Sub
    Partial Private Sub OnPatientIdChanging(value As String)
    End Sub
    Partial Private Sub OnPatientIdChanged()
    End Sub
    Partial Private Sub OnMedicalIdChanging(value As String)
    End Sub
    Partial Private Sub OnMedicalIdChanged()
    End Sub
    Partial Private Sub OnVisitDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnVisitDateChanged()
    End Sub
    Partial Private Sub OnBloodPressureChanging(value As String)
    End Sub
    Partial Private Sub OnBloodPressureChanged()
    End Sub
    Partial Private Sub OnAllergiesChanging(value As String)
    End Sub
    Partial Private Sub OnAllergiesChanged()
    End Sub
    Partial Private Sub OnDiseaseChanging(value As String)
    End Sub
    Partial Private Sub OnDiseaseChanged()
    End Sub
    Partial Private Sub OnCautionChanging(value As String)
    End Sub
    Partial Private Sub OnCautionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property RecordId() As String
		Get
			Return Me._RecordId
		End Get
		Set
			If (String.Equals(Me._RecordId, value) = false) Then
				Me.OnRecordIdChanging(value)
				Me.SendPropertyChanging
				Me._RecordId = value
				Me.SendPropertyChanged("RecordId")
				Me.OnRecordIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientId", DbType:="VarChar(10)")>  _
	Public Property PatientId() As String
		Get
			Return Me._PatientId
		End Get
		Set
			If (String.Equals(Me._PatientId, value) = false) Then
				Me.OnPatientIdChanging(value)
				Me.SendPropertyChanging
				Me._PatientId = value
				Me.SendPropertyChanged("PatientId")
				Me.OnPatientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MedicalId", DbType:="VarChar(10)")>  _
	Public Property MedicalId() As String
		Get
			Return Me._MedicalId
		End Get
		Set
			If (String.Equals(Me._MedicalId, value) = false) Then
				Me.OnMedicalIdChanging(value)
				Me.SendPropertyChanging
				Me._MedicalId = value
				Me.SendPropertyChanged("MedicalId")
				Me.OnMedicalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VisitDate", DbType:="DateTime")>  _
	Public Property VisitDate() As System.Nullable(Of Date)
		Get
			Return Me._VisitDate
		End Get
		Set
			If (Me._VisitDate.Equals(value) = false) Then
				Me.OnVisitDateChanging(value)
				Me.SendPropertyChanging
				Me._VisitDate = value
				Me.SendPropertyChanged("VisitDate")
				Me.OnVisitDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloodPressure", DbType:="VarChar(8)")>  _
	Public Property BloodPressure() As String
		Get
			Return Me._BloodPressure
		End Get
		Set
			If (String.Equals(Me._BloodPressure, value) = false) Then
				Me.OnBloodPressureChanging(value)
				Me.SendPropertyChanging
				Me._BloodPressure = value
				Me.SendPropertyChanged("BloodPressure")
				Me.OnBloodPressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allergies", DbType:="VarChar(50)")>  _
	Public Property Allergies() As String
		Get
			Return Me._Allergies
		End Get
		Set
			If (String.Equals(Me._Allergies, value) = false) Then
				Me.OnAllergiesChanging(value)
				Me.SendPropertyChanging
				Me._Allergies = value
				Me.SendPropertyChanged("Allergies")
				Me.OnAllergiesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Disease", DbType:="VarChar(50)")>  _
	Public Property Disease() As String
		Get
			Return Me._Disease
		End Get
		Set
			If (String.Equals(Me._Disease, value) = false) Then
				Me.OnDiseaseChanging(value)
				Me.SendPropertyChanging
				Me._Disease = value
				Me.SendPropertyChanged("Disease")
				Me.OnDiseaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Caution", DbType:="VarChar(50)")>  _
	Public Property Caution() As String
		Get
			Return Me._Caution
		End Get
		Set
			If (String.Equals(Me._Caution, value) = false) Then
				Me.OnCautionChanging(value)
				Me.SendPropertyChanging
				Me._Caution = value
				Me.SendPropertyChanged("Caution")
				Me.OnCautionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Payment")>  _
Partial Public Class Payment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PaymentId As String
	
	Private _PayMethod As String
	
	Private _PaymentAmount As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPaymentIdChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentIdChanged()
    End Sub
    Partial Private Sub OnPayMethodChanging(value As String)
    End Sub
    Partial Private Sub OnPayMethodChanged()
    End Sub
    Partial Private Sub OnPaymentAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPaymentAmountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PaymentId() As String
		Get
			Return Me._PaymentId
		End Get
		Set
			If (String.Equals(Me._PaymentId, value) = false) Then
				Me.OnPaymentIdChanging(value)
				Me.SendPropertyChanging
				Me._PaymentId = value
				Me.SendPropertyChanged("PaymentId")
				Me.OnPaymentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PayMethod", DbType:="VarChar(13)")>  _
	Public Property PayMethod() As String
		Get
			Return Me._PayMethod
		End Get
		Set
			If (String.Equals(Me._PayMethod, value) = false) Then
				Me.OnPayMethodChanging(value)
				Me.SendPropertyChanging
				Me._PayMethod = value
				Me.SendPropertyChanged("PayMethod")
				Me.OnPayMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentAmount", DbType:="Decimal(10,2)")>  _
	Public Property PaymentAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._PaymentAmount
		End Get
		Set
			If (Me._PaymentAmount.Equals(value) = false) Then
				Me.OnPaymentAmountChanging(value)
				Me.SendPropertyChanging
				Me._PaymentAmount = value
				Me.SendPropertyChanged("PaymentAmount")
				Me.OnPaymentAmountChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PanelOrganisation")>  _
Partial Public Class PanelOrganisation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PanelId As String
	
	Private _OrgName As String
	
	Private _OrgCode As String
	
	Private _CoverLimit As System.Nullable(Of Integer)
	
	Private _ContactNo As String
	
	Private _OrgNature As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPanelIdChanging(value As String)
    End Sub
    Partial Private Sub OnPanelIdChanged()
    End Sub
    Partial Private Sub OnOrgNameChanging(value As String)
    End Sub
    Partial Private Sub OnOrgNameChanged()
    End Sub
    Partial Private Sub OnOrgCodeChanging(value As String)
    End Sub
    Partial Private Sub OnOrgCodeChanged()
    End Sub
    Partial Private Sub OnCoverLimitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCoverLimitChanged()
    End Sub
    Partial Private Sub OnContactNoChanging(value As String)
    End Sub
    Partial Private Sub OnContactNoChanged()
    End Sub
    Partial Private Sub OnOrgNatureChanging(value As String)
    End Sub
    Partial Private Sub OnOrgNatureChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PanelId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PanelId() As String
		Get
			Return Me._PanelId
		End Get
		Set
			If (String.Equals(Me._PanelId, value) = false) Then
				Me.OnPanelIdChanging(value)
				Me.SendPropertyChanging
				Me._PanelId = value
				Me.SendPropertyChanged("PanelId")
				Me.OnPanelIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrgName", DbType:="VarChar(50)")>  _
	Public Property OrgName() As String
		Get
			Return Me._OrgName
		End Get
		Set
			If (String.Equals(Me._OrgName, value) = false) Then
				Me.OnOrgNameChanging(value)
				Me.SendPropertyChanging
				Me._OrgName = value
				Me.SendPropertyChanged("OrgName")
				Me.OnOrgNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrgCode", DbType:="VarChar(15)")>  _
	Public Property OrgCode() As String
		Get
			Return Me._OrgCode
		End Get
		Set
			If (String.Equals(Me._OrgCode, value) = false) Then
				Me.OnOrgCodeChanging(value)
				Me.SendPropertyChanging
				Me._OrgCode = value
				Me.SendPropertyChanged("OrgCode")
				Me.OnOrgCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CoverLimit", DbType:="Int")>  _
	Public Property CoverLimit() As System.Nullable(Of Integer)
		Get
			Return Me._CoverLimit
		End Get
		Set
			If (Me._CoverLimit.Equals(value) = false) Then
				Me.OnCoverLimitChanging(value)
				Me.SendPropertyChanging
				Me._CoverLimit = value
				Me.SendPropertyChanged("CoverLimit")
				Me.OnCoverLimitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNo", DbType:="VarChar(12)")>  _
	Public Property ContactNo() As String
		Get
			Return Me._ContactNo
		End Get
		Set
			If (String.Equals(Me._ContactNo, value) = false) Then
				Me.OnContactNoChanging(value)
				Me.SendPropertyChanging
				Me._ContactNo = value
				Me.SendPropertyChanged("ContactNo")
				Me.OnContactNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrgNature", DbType:="VarChar(50)")>  _
	Public Property OrgNature() As String
		Get
			Return Me._OrgNature
		End Get
		Set
			If (String.Equals(Me._OrgNature, value) = false) Then
				Me.OnOrgNatureChanging(value)
				Me.SendPropertyChanging
				Me._OrgNature = value
				Me.SendPropertyChanged("OrgNature")
				Me.OnOrgNatureChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Inventory")>  _
Partial Public Class Inventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemId As String
	
	Private _ItemName As String
	
	Private _ItemDescription As String
	
	Private _UnitPrice As System.Nullable(Of Decimal)
	
	Private _Quantity As System.Nullable(Of Integer)
	
	Private _ExpiryDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemIdChanging(value As String)
    End Sub
    Partial Private Sub OnItemIdChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnItemDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnItemDescriptionChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnExpiryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpiryDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ItemId() As String
		Get
			Return Me._ItemId
		End Get
		Set
			If (String.Equals(Me._ItemId, value) = false) Then
				Me.OnItemIdChanging(value)
				Me.SendPropertyChanging
				Me._ItemId = value
				Me.SendPropertyChanged("ItemId")
				Me.OnItemIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="VarChar(20)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemDescription", DbType:="VarChar(100)")>  _
	Public Property ItemDescription() As String
		Get
			Return Me._ItemDescription
		End Get
		Set
			If (String.Equals(Me._ItemDescription, value) = false) Then
				Me.OnItemDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ItemDescription = value
				Me.SendPropertyChanged("ItemDescription")
				Me.OnItemDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Decimal(10,2)")>  _
	Public Property UnitPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitPrice
		End Get
		Set
			If (Me._UnitPrice.Equals(value) = false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int")>  _
	Public Property Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiryDate", DbType:="Date")>  _
	Public Property ExpiryDate() As System.Nullable(Of Date)
		Get
			Return Me._ExpiryDate
		End Get
		Set
			If (Me._ExpiryDate.Equals(value) = false) Then
				Me.OnExpiryDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpiryDate = value
				Me.SendPropertyChanged("ExpiryDate")
				Me.OnExpiryDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Patient")>  _
Partial Public Class Patient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PatientId As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _IcNo As String
	
	Private _Age As String
	
	Private _Gender As String
	
	Private _ContactNo As String
	
	Private _EmailAdd As String
	
	Private _Address As String
	
	Private _City As String
	
	Private _State As String
	
	Private _PostCode As String
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPatientIdChanging(value As String)
    End Sub
    Partial Private Sub OnPatientIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnIcNoChanging(value As String)
    End Sub
    Partial Private Sub OnIcNoChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As String)
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnContactNoChanging(value As String)
    End Sub
    Partial Private Sub OnContactNoChanged()
    End Sub
    Partial Private Sub OnEmailAddChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PatientId() As String
		Get
			Return Me._PatientId
		End Get
		Set
			If (String.Equals(Me._PatientId, value) = false) Then
				Me.OnPatientIdChanging(value)
				Me.SendPropertyChanging
				Me._PatientId = value
				Me.SendPropertyChanged("PatientId")
				Me.OnPatientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(20)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(20)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IcNo", DbType:="VarChar(14)")>  _
	Public Property IcNo() As String
		Get
			Return Me._IcNo
		End Get
		Set
			If (String.Equals(Me._IcNo, value) = false) Then
				Me.OnIcNoChanging(value)
				Me.SendPropertyChanging
				Me._IcNo = value
				Me.SendPropertyChanged("IcNo")
				Me.OnIcNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="VarChar(3)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="VarChar(6)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNo", DbType:="VarChar(12)")>  _
	Public Property ContactNo() As String
		Get
			Return Me._ContactNo
		End Get
		Set
			If (String.Equals(Me._ContactNo, value) = false) Then
				Me.OnContactNoChanging(value)
				Me.SendPropertyChanging
				Me._ContactNo = value
				Me.SendPropertyChanged("ContactNo")
				Me.OnContactNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAdd", DbType:="VarChar(50)")>  _
	Public Property EmailAdd() As String
		Get
			Return Me._EmailAdd
		End Get
		Set
			If (String.Equals(Me._EmailAdd, value) = false) Then
				Me.OnEmailAddChanging(value)
				Me.SendPropertyChanging
				Me._EmailAdd = value
				Me.SendPropertyChanged("EmailAdd")
				Me.OnEmailAddChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(60)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(20)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(20)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="VarChar(6)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(30)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Invoice")>  _
Partial Public Class Invoice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InvoiceId As String
	
	Private _InvoiceDate As System.Nullable(Of Date)
	
	Private _InvoiceTime As System.Nullable(Of System.TimeSpan)
	
	Private _PatientId As String
	
	Private _TotalPrice As System.Nullable(Of Decimal)
	
	Private _PanelId As String
	
	Private _PaymentId As String
	
	Private _PaymentStatus As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInvoiceIdChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceIdChanged()
    End Sub
    Partial Private Sub OnInvoiceDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInvoiceDateChanged()
    End Sub
    Partial Private Sub OnInvoiceTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnInvoiceTimeChanged()
    End Sub
    Partial Private Sub OnPatientIdChanging(value As String)
    End Sub
    Partial Private Sub OnPatientIdChanged()
    End Sub
    Partial Private Sub OnTotalPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalPriceChanged()
    End Sub
    Partial Private Sub OnPanelIdChanging(value As String)
    End Sub
    Partial Private Sub OnPanelIdChanged()
    End Sub
    Partial Private Sub OnPaymentIdChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentIdChanged()
    End Sub
    Partial Private Sub OnPaymentStatusChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property InvoiceId() As String
		Get
			Return Me._InvoiceId
		End Get
		Set
			If (String.Equals(Me._InvoiceId, value) = false) Then
				Me.OnInvoiceIdChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceId = value
				Me.SendPropertyChanged("InvoiceId")
				Me.OnInvoiceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceDate", DbType:="Date")>  _
	Public Property InvoiceDate() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceDate
		End Get
		Set
			If (Me._InvoiceDate.Equals(value) = false) Then
				Me.OnInvoiceDateChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceDate = value
				Me.SendPropertyChanged("InvoiceDate")
				Me.OnInvoiceDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceTime", DbType:="Time")>  _
	Public Property InvoiceTime() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._InvoiceTime
		End Get
		Set
			If (Me._InvoiceTime.Equals(value) = false) Then
				Me.OnInvoiceTimeChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceTime = value
				Me.SendPropertyChanged("InvoiceTime")
				Me.OnInvoiceTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientId", DbType:="VarChar(10)")>  _
	Public Property PatientId() As String
		Get
			Return Me._PatientId
		End Get
		Set
			If (String.Equals(Me._PatientId, value) = false) Then
				Me.OnPatientIdChanging(value)
				Me.SendPropertyChanging
				Me._PatientId = value
				Me.SendPropertyChanged("PatientId")
				Me.OnPatientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalPrice", DbType:="Decimal(10,2)")>  _
	Public Property TotalPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalPrice
		End Get
		Set
			If (Me._TotalPrice.Equals(value) = false) Then
				Me.OnTotalPriceChanging(value)
				Me.SendPropertyChanging
				Me._TotalPrice = value
				Me.SendPropertyChanged("TotalPrice")
				Me.OnTotalPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PanelId", DbType:="VarChar(10)")>  _
	Public Property PanelId() As String
		Get
			Return Me._PanelId
		End Get
		Set
			If (String.Equals(Me._PanelId, value) = false) Then
				Me.OnPanelIdChanging(value)
				Me.SendPropertyChanging
				Me._PanelId = value
				Me.SendPropertyChanged("PanelId")
				Me.OnPanelIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentId", DbType:="VarChar(10)")>  _
	Public Property PaymentId() As String
		Get
			Return Me._PaymentId
		End Get
		Set
			If (String.Equals(Me._PaymentId, value) = false) Then
				Me.OnPaymentIdChanging(value)
				Me.SendPropertyChanging
				Me._PaymentId = value
				Me.SendPropertyChanged("PaymentId")
				Me.OnPaymentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentStatus", DbType:="VarChar(10)")>  _
	Public Property PaymentStatus() As String
		Get
			Return Me._PaymentStatus
		End Get
		Set
			If (String.Equals(Me._PaymentStatus, value) = false) Then
				Me.OnPaymentStatusChanging(value)
				Me.SendPropertyChanging
				Me._PaymentStatus = value
				Me.SendPropertyChanged("PaymentStatus")
				Me.OnPaymentStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderId As String
	
	Private _InvoiceId As String
	
	Private _ItemId As String
	
	Private _AmountTaken As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIdChanging(value As String)
    End Sub
    Partial Private Sub OnOrderIdChanged()
    End Sub
    Partial Private Sub OnInvoiceIdChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceIdChanged()
    End Sub
    Partial Private Sub OnItemIdChanging(value As String)
    End Sub
    Partial Private Sub OnItemIdChanged()
    End Sub
    Partial Private Sub OnAmountTakenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAmountTakenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property OrderId() As String
		Get
			Return Me._OrderId
		End Get
		Set
			If (String.Equals(Me._OrderId, value) = false) Then
				Me.OnOrderIdChanging(value)
				Me.SendPropertyChanging
				Me._OrderId = value
				Me.SendPropertyChanged("OrderId")
				Me.OnOrderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceId", DbType:="VarChar(10)")>  _
	Public Property InvoiceId() As String
		Get
			Return Me._InvoiceId
		End Get
		Set
			If (String.Equals(Me._InvoiceId, value) = false) Then
				Me.OnInvoiceIdChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceId = value
				Me.SendPropertyChanged("InvoiceId")
				Me.OnInvoiceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemId", DbType:="VarChar(10)")>  _
	Public Property ItemId() As String
		Get
			Return Me._ItemId
		End Get
		Set
			If (String.Equals(Me._ItemId, value) = false) Then
				Me.OnItemIdChanging(value)
				Me.SendPropertyChanging
				Me._ItemId = value
				Me.SendPropertyChanged("ItemId")
				Me.OnItemIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountTaken", DbType:="Int")>  _
	Public Property AmountTaken() As System.Nullable(Of Integer)
		Get
			Return Me._AmountTaken
		End Get
		Set
			If (Me._AmountTaken.Equals(value) = false) Then
				Me.OnAmountTakenChanging(value)
				Me.SendPropertyChanging
				Me._AmountTaken = value
				Me.SendPropertyChanged("AmountTaken")
				Me.OnAmountTakenChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Appointment")>  _
Partial Public Class Appointment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AppointId As String
	
	Private _PatientId As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _IcNo As String
	
	Private _ContactNo As String
	
	Private _EmailAdd As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Time As System.Nullable(Of System.TimeSpan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAppointIdChanging(value As String)
    End Sub
    Partial Private Sub OnAppointIdChanged()
    End Sub
    Partial Private Sub OnPatientIdChanging(value As String)
    End Sub
    Partial Private Sub OnPatientIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnIcNoChanging(value As String)
    End Sub
    Partial Private Sub OnIcNoChanged()
    End Sub
    Partial Private Sub OnContactNoChanging(value As String)
    End Sub
    Partial Private Sub OnContactNoChanged()
    End Sub
    Partial Private Sub OnEmailAddChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppointId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property AppointId() As String
		Get
			Return Me._AppointId
		End Get
		Set
			If (String.Equals(Me._AppointId, value) = false) Then
				Me.OnAppointIdChanging(value)
				Me.SendPropertyChanging
				Me._AppointId = value
				Me.SendPropertyChanged("AppointId")
				Me.OnAppointIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientId", DbType:="VarChar(10)")>  _
	Public Property PatientId() As String
		Get
			Return Me._PatientId
		End Get
		Set
			If (String.Equals(Me._PatientId, value) = false) Then
				Me.OnPatientIdChanging(value)
				Me.SendPropertyChanging
				Me._PatientId = value
				Me.SendPropertyChanged("PatientId")
				Me.OnPatientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(20)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(20)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IcNo", DbType:="VarChar(14)")>  _
	Public Property IcNo() As String
		Get
			Return Me._IcNo
		End Get
		Set
			If (String.Equals(Me._IcNo, value) = false) Then
				Me.OnIcNoChanging(value)
				Me.SendPropertyChanging
				Me._IcNo = value
				Me.SendPropertyChanged("IcNo")
				Me.OnIcNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNo", DbType:="VarChar(12)")>  _
	Public Property ContactNo() As String
		Get
			Return Me._ContactNo
		End Get
		Set
			If (String.Equals(Me._ContactNo, value) = false) Then
				Me.OnContactNoChanging(value)
				Me.SendPropertyChanging
				Me._ContactNo = value
				Me.SendPropertyChanged("ContactNo")
				Me.OnContactNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAdd", DbType:="VarChar(50)")>  _
	Public Property EmailAdd() As String
		Get
			Return Me._EmailAdd
		End Get
		Set
			If (String.Equals(Me._EmailAdd, value) = false) Then
				Me.OnEmailAddChanging(value)
				Me.SendPropertyChanging
				Me._EmailAdd = value
				Me.SendPropertyChanged("EmailAdd")
				Me.OnEmailAddChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="Time")>  _
	Public Property Time() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._Time
		End Get
		Set
			If (Me._Time.Equals(value) = false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Medical")>  _
Partial Public Class Medical
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MedicalId As String
	
	Private _PatientId As String
	
	Private _ItemId As String
	
	Private _AmountTaken As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMedicalIdChanging(value As String)
    End Sub
    Partial Private Sub OnMedicalIdChanged()
    End Sub
    Partial Private Sub OnPatientIdChanging(value As String)
    End Sub
    Partial Private Sub OnPatientIdChanged()
    End Sub
    Partial Private Sub OnItemIdChanging(value As String)
    End Sub
    Partial Private Sub OnItemIdChanged()
    End Sub
    Partial Private Sub OnAmountTakenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAmountTakenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MedicalId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MedicalId() As String
		Get
			Return Me._MedicalId
		End Get
		Set
			If (String.Equals(Me._MedicalId, value) = false) Then
				Me.OnMedicalIdChanging(value)
				Me.SendPropertyChanging
				Me._MedicalId = value
				Me.SendPropertyChanged("MedicalId")
				Me.OnMedicalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientId", DbType:="VarChar(10)")>  _
	Public Property PatientId() As String
		Get
			Return Me._PatientId
		End Get
		Set
			If (String.Equals(Me._PatientId, value) = false) Then
				Me.OnPatientIdChanging(value)
				Me.SendPropertyChanging
				Me._PatientId = value
				Me.SendPropertyChanged("PatientId")
				Me.OnPatientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemId", DbType:="VarChar(10)")>  _
	Public Property ItemId() As String
		Get
			Return Me._ItemId
		End Get
		Set
			If (String.Equals(Me._ItemId, value) = false) Then
				Me.OnItemIdChanging(value)
				Me.SendPropertyChanging
				Me._ItemId = value
				Me.SendPropertyChanged("ItemId")
				Me.OnItemIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountTaken", DbType:="Int")>  _
	Public Property AmountTaken() As System.Nullable(Of Integer)
		Get
			Return Me._AmountTaken
		End Get
		Set
			If (Me._AmountTaken.Equals(value) = false) Then
				Me.OnAmountTakenChanging(value)
				Me.SendPropertyChanging
				Me._AmountTaken = value
				Me.SendPropertyChanged("AmountTaken")
				Me.OnAmountTakenChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UpdateCheck")>  _
Partial Public Class UpdateCheck
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UpdateCheckId As Integer
	
	Private _TableName As String
	
	Private _GotUpdate As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUpdateCheckIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUpdateCheckIdChanged()
    End Sub
    Partial Private Sub OnTableNameChanging(value As String)
    End Sub
    Partial Private Sub OnTableNameChanged()
    End Sub
    Partial Private Sub OnGotUpdateChanging(value As String)
    End Sub
    Partial Private Sub OnGotUpdateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdateCheckId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UpdateCheckId() As Integer
		Get
			Return Me._UpdateCheckId
		End Get
		Set
			If ((Me._UpdateCheckId = value)  _
						= false) Then
				Me.OnUpdateCheckIdChanging(value)
				Me.SendPropertyChanging
				Me._UpdateCheckId = value
				Me.SendPropertyChanged("UpdateCheckId")
				Me.OnUpdateCheckIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableName", DbType:="VarChar(15)")>  _
	Public Property TableName() As String
		Get
			Return Me._TableName
		End Get
		Set
			If (String.Equals(Me._TableName, value) = false) Then
				Me.OnTableNameChanging(value)
				Me.SendPropertyChanging
				Me._TableName = value
				Me.SendPropertyChanged("TableName")
				Me.OnTableNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GotUpdate", DbType:="VarChar(5)")>  _
	Public Property GotUpdate() As String
		Get
			Return Me._GotUpdate
		End Get
		Set
			If (String.Equals(Me._GotUpdate, value) = false) Then
				Me.OnGotUpdateChanging(value)
				Me.SendPropertyChanging
				Me._GotUpdate = value
				Me.SendPropertyChanged("GotUpdate")
				Me.OnGotUpdateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
